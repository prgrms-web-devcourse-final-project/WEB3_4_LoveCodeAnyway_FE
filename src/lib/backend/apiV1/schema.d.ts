/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/api/v1/parties/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 모임 상세 조회 */
        get: operations['getParty']
        /** 모임 수정 */
        put: operations['modifyParty']
        post?: never
        /** 소프트 딜리트 (모임 삭제) */
        delete: operations['softDeleteParty']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/diaries/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 탈출일지 단건조회
         * @description 탈출일지 id를 기준으로 특정 탈출일지를 가져옵니다.
         */
        get: operations['getItem']
        /**
         * 탈출일지 수정
         * @description 탈출일지 id를 기준으로 특정 탈출일지를 가져와 수정합니다.
         */
        put: operations['modify']
        post?: never
        /**
         * 탈출일지 삭제
         * @description 탈출일지 id를 기준으로 특정 탈출일지를 가져와 삭제합니다.
         */
        delete: operations['delete']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/boards/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 문의 상세 조회 */
        get: operations['getPost']
        /** 문의 수정 */
        put: operations['modifyPost']
        post?: never
        /** 문의 삭제 */
        delete: operations['deletePost']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/themes/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 관리자 전용 테마 단건 조회 API */
        get: operations['getTheme']
        /** 관리자 전용 테마 수정 API */
        put: operations['modify_1']
        post?: never
        /** 관리자 전용 테마 삭제 API */
        delete: operations['delete_1']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/stores/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        /** 관리자 전용 매장 수정 API */
        put: operations['modifyStore']
        post?: never
        /** 관리자 전용 매장 삭제 API */
        delete: operations['deleteStore']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/boards/{id}/reply/{replyId}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        /** 관리자 - 답변 수정 */
        put: operations['modifyReply']
        post?: never
        /** 관리자 - 답변 삭제 */
        delete: operations['deleteReply']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/messages': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post: operations['sendMessage']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/upload/image/{diaryId}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post: operations['uploadImage']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/upload/attachment/{postId}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post: operations['uploadAttachment']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /**
         * 필터 기반 테마 다건 조회 api
         * @description 무한 스크롤에서 사용하기 위해 페이지네이션 처리(default = 0)
         */
        post: operations['getThemesWithFilter']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/{id}/wishes': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 현재 로그인 중인 사용자의 모임 희망 테마 등록 */
        post: operations['addWishTheme']
        /** 현재 로그인 중인 사용자의 모임 희망 테마 삭제 */
        delete: operations['deleteWishTheme']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모임 등록 */
        post: operations['createParty']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/{id}/reviews': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모든 모임원 평가 */
        post: operations['reviewPartyMembers']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/{id}/reject/{memberId}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모임 신청 거절 */
        post: operations['rejectPartyMember']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/{id}/apply': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모임 참가 신청 */
        post: operations['applyParty']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/{id}/accept/{memberId}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모임 신청 승인 */
        post: operations['acceptPartyMember']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/search': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 모임 목록 조회 (무한 스크롤) */
        post: operations['getParties']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/diaries': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 탈출일지 월별 다건조회
         * @description 필터를 기반으로 사용자의 전체 탈출일지 목록을 가져옵니다.
         */
        get: operations['getDiariesByMonth']
        put?: never
        /**
         * 탈출일지 등록
         * @description 새로운 탈출일지를 등록합니다.
         */
        post: operations['write']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/diaries/theme': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /**
         * 탈출일지에서 테마 등록
         * @description 등록되지 않은 테마를 탈출일지에 작성하기 위해 테마를 등록합니다.
         */
        post: operations['saveThemeForDiary']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/diaries/list': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /**
         * 탈출일지 다건조회
         * @description 필터를 기반으로 사용자의 전체 탈출일지 목록을 가져옵니다.
         */
        post: operations['getAllItems']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/boards': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 나의 문의 보기 */
        get: operations['getMyPosts']
        put?: never
        /** 문의 등록 */
        post: operations['createPost']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/auth/signup': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post: operations['signup']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/auth/logout': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post: operations['logout']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/themes': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 관리자 전용 테마 등록 API */
        post: operations['save']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/themes/search': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 관리자 전용 테마 필터 + 검색 API */
        post: operations['getThemes']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/stores': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 관리자 전용 매장 검색 API
         * @description 테마를 저장할 때 매핑할 매장 검색
         */
        get: operations['getStoresByKeyword']
        put?: never
        /** 관리자 전용 매장 등록 API */
        post: operations['saveStore']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/boards/{id}/reply': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 관리자 - 답변 등록 */
        post: operations['createReply']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/boards/search': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        /** 관리자 - 문의 목록 조회 */
        post: operations['getPosts']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/alarms': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 알림 목록 조회
         * @description 사용자의 알림 목록을 페이징하여 조회합니다.
         */
        get: operations['getAlarms']
        put?: never
        /**
         * 알림 생성
         * @description 새로운 알림을 생성합니다. (관리자시스템용)
         */
        post: operations['createAlarm']
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/messages/{id}/read': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch: operations['updateReadStatus']
        trace?: never
    }
    '/api/v1/parties/{id}/unexecuted': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /** 모임 미실행 완료 */
        patch: operations['unexecuteParty']
        trace?: never
    }
    '/api/v1/parties/{id}/executed': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /** 모임 실행 완료 */
        patch: operations['executeParty']
        trace?: never
    }
    '/api/v1/members/me': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 내 프로필 조회 API
         * @description 내 프로필 정보를 조회하며, 닉네임, 성별, 소개글, 프로필 이미지, 매너 점수를 응답합니다.
         */
        get: operations['getMyBasicProfile']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /**
         * 내 프로필 수정 API
         * @description 내 프로필 정보를 수정합니다. 닉네임, 소개글, 프로필 이미지를 수정할 수 있습니다.
         */
        patch: operations['updateMyProfile']
        trace?: never
    }
    '/api/v1/members/me/tags': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 내 사용자 태그 조회 API
         * @description 내 프로필에 설정된 사용자 태그를 조회하며, 태그 ID와 태그 이름을 응답합니다.
         */
        get: operations['getMyTags']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /**
         * 내 사용자 태그 수정 API
         * @description 내 프로필에 설정된 사용자 태그를 수정합니다. 태그 ID 리스트를 요청 본문에 포함하여 수정합니다.
         */
        patch: operations['updateMyTags']
        trace?: never
    }
    '/alarms/{id}/read': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /**
         * 알림 읽음 처리
         * @description 특정 알림을 읽음 상태로 변경합니다.
         */
        patch: operations['markAsRead']
        trace?: never
    }
    '/alarms/read-all': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        /**
         * 모든 알림 읽음 처리
         * @description 사용자의 모든 알림을 읽음 상태로 변경합니다.
         */
        patch: operations['markAllAsRead']
        trace?: never
    }
    '/messages/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getMessage']
        put?: never
        post?: never
        delete: operations['deleteMessage']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/messages/sent': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getSentMessages']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/messages/received': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getReceivedMessages']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/members/{id}/review': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getMemberReview']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 테마 상세 조회 api
         * @description 테마 통계 부분은 해당 테마에 대한 방탈출 일지가 1개 이상 작성 되야 존재하므로 Nullable
         */
        get: operations['getTheme_1']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/{id}/parties': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 해당 테마의 모집 중인 모임 조회 */
        get: operations['getPartiesByTheme']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/wishes': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 현재 로그인 중인 사용자의 모임 희망 테마 목록 조회 */
        get: operations['getWishThemes']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/tags': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 태그 목록 조회 api */
        get: operations['getAllThemeTags']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/search-for-party': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 모임 등록 전용 테마 검색 api
         * @description 운영중인 테마만 검색 가능
         */
        get: operations['getThemesForPartySearch']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/search-for-diary': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 방탈출 일지 작성 전용 테마 검색 api
         * @description 삭제된(soft) 테마 제외 모든 테마 검색 가능
         */
        get: operations['getThemesForDiarySearch']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/popular': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 태그별 인기 테마 Top 10 조회 api */
        get: operations['getPopularThemes']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/themes/newest': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 태그별 최신 테마 Top 10 조회 api */
        get: operations['getNewestThemes']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/regions': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getSubRegionsByMajorRegion']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/review-keywords': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 평가 Enum 값 조회 */
        get: operations['getReviewKeywords']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/main': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 메인 페이지용 모집 중 모임 12개 조회 */
        get: operations['getMainParties']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/joins/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 다른 사람의 참여한 모임 목록 조회 */
        get: operations['getOtherJoinedParties']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/joins/me': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 내가 참여한 모임 목록 조회 */
        get: operations['getMyJoinedParties']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/members/{memberId}/profile': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 타인 공개 프로필 통합 조회 API
         * @description 타인 공개 프로필을 조회합니다. 닉네임, 성별, 소개글, 프로필 이미지, 매너 점수, 사용자 태그, 통계 정보를 응답합니다.
         */
        get: operations['getOtherProfile']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/members/tags': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['getAllTags']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/members/stat': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 사용자 분석 페이지 조회 API
         * @description 자신의 사용자 분석 정보를 조회합니다.데이터가 없는 경우에는 null을 반환합니다.
         */
        get: operations['getMemberStat']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/members/me/stats': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 내 요약 통계 조회 API
         * @description 프로필에서 사용하는 통계 정보(총 탈출 수, 성공률, 노힌트 성공률)를 응답합니다.
         */
        get: operations['getMyEscapeSummary']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/members/check-nickname': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 닉네임 중복 확인 API
         * @description 닉네임의 중복 여부를 확인합니다, 사용 가능한 경우 true, 사용 중인 경우 false를 응답합니다.
         */
        get: operations['checkNicknameDuplicate']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/auth/login': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get: operations['kakaoLogin']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/admin/boards/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /** 관리자 - 문의 상세 조회 */
        get: operations['getPostForAdmin']
        put?: never
        post?: never
        /** 관리자 - 문의글 삭제 */
        delete: operations['deletePost_1']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/alarms/{id}': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 알림 상세 조회
         * @description 특정 알림의 상세 정보를 조회합니다.
         */
        get: operations['getAlarm']
        put?: never
        post?: never
        /**
         * 알림 삭제
         * @description 특정 알림을 삭제합니다.
         */
        delete: operations['deleteAlarm']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/alarms/{id}/redirect': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 알림 클릭 처리
         * @description 알림을 클릭했을 때 관련 페이지로 리다이렉트합니다.
         */
        get: operations['redirectAlarm']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/alarms/subscribe': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 알림 SSE 구독
         * @description 실시간 알림을 위한 SSE 연결을 구독합니다.
         */
        get: operations['subscribeAlarm']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/alarms/count': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        /**
         * 알림 개수 조회
         * @description 사용자의 전체 및 읽지 않은 알림 개수를 조회합니다.
         */
        get: operations['getAlarmCounts']
        put?: never
        post?: never
        delete?: never
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
    '/api/v1/parties/{id}/cancel': {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        get?: never
        put?: never
        post?: never
        /** 모임 참가 신청 취소 */
        delete: operations['cancelAppliedParty']
        options?: never
        head?: never
        patch?: never
        trace?: never
    }
}
export type webhooks = Record<string, never>
export interface components {
    schemas: {
        PartyRequest: {
            /** Format: int64 */
            themeId: number
            title: string
            content: string
            /** Format: date-time */
            scheduledAt: string
            /** Format: int32 */
            participantsNeeded: number
            /** Format: int32 */
            totalParticipants: number
            rookieAvailable: boolean
        }
        PartyDto: {
            /** Format: int64 */
            id?: number
            title?: string
            content?: string
            /** Format: date-time */
            scheduledAt?: string
            /** Format: int32 */
            participantsNeeded?: number
            /** Format: int32 */
            acceptedParticipantsCount?: number
            /** Format: int32 */
            totalParticipants?: number
            rookieAvailable?: boolean
            /** @enum {string} */
            status?: 'RECRUITING' | 'FULL' | 'PENDING' | 'COMPLETED' | 'CANCELLED'
            /** Format: int64 */
            hostId?: number
            hostNickname?: string
            /** Format: int64 */
            themeId?: number
            themeName?: string
        }
        SuccessResponsePartyDto: {
            message?: string
            data?: components['schemas']['PartyDto']
        }
        DiaryRequestDto: {
            /** Format: int64 */
            themeId: number
            /** Format: date */
            escapeDate?: string
            participants?: string
            /** Format: int32 */
            difficulty?: number
            /** Format: int32 */
            fear?: number
            /** Format: int32 */
            activity?: number
            /** Format: int32 */
            satisfaction?: number
            /** Format: int32 */
            production?: number
            /** Format: int32 */
            story?: number
            /** Format: int32 */
            question?: number
            /** Format: int32 */
            interior?: number
            /** Format: int32 */
            deviceRatio?: number
            /** Format: int32 */
            hintCount?: number
            escapeResult?: boolean
            timeType: string
            elapsedTime?: string
            review?: string
        }
        DiaryDto: {
            /** Format: int64 */
            id?: number
            /** Format: int64 */
            themeId?: number
            themeName?: string
            thumbnailUrl?: string
            storeName?: string
            imageUrl?: string
            /** Format: date */
            escapeDate?: string
            participants?: string
            /** Format: int32 */
            difficulty?: number
            /** Format: int32 */
            fear?: number
            /** Format: int32 */
            activity?: number
            /** Format: int32 */
            satisfaction?: number
            /** Format: int32 */
            production?: number
            /** Format: int32 */
            story?: number
            /** Format: int32 */
            question?: number
            /** Format: int32 */
            interior?: number
            /** Format: int32 */
            deviceRatio?: number
            /** Format: int32 */
            hintCount?: number
            escapeResult?: boolean
            /** Format: int32 */
            elapsedTime?: number
            review?: string
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            modifiedAt?: string
        }
        SuccessResponseDiaryDto: {
            message?: string
            data?: components['schemas']['DiaryDto']
        }
        PostRequest: {
            /** @enum {string} */
            type: 'QNA' | 'REPORT' | 'THEME'
            title: string
            content: string
        }
        PostDto: {
            /** Format: int64 */
            id?: number
            /** @enum {string} */
            type?: 'QNA' | 'REPORT' | 'THEME'
            title?: string
            content?: string
            /** Format: int64 */
            memberId?: number
            nickName?: string
            hasAttachment?: boolean
        }
        SuccessResponsePostDto: {
            message?: string
            data?: components['schemas']['PostDto']
        }
        ThemeForAdminRequest: {
            /** Format: int64 */
            storeId: number
            tagIds?: number[]
            name: string
            description?: string
            /** Format: float */
            officialDifficulty?: number
            /** Format: int32 */
            runtime?: number
            /** Format: int32 */
            minParticipants?: number
            /** Format: int32 */
            maxParticipants?: number
            /** Format: int32 */
            price?: number
            status?: string
            reservationUrl?: string
            thumbnailUrl?: string
        }
        SuccessResponseVoid: {
            message?: string
            data?: Record<string, never>
        }
        StoreRequest: {
            /** Format: int64 */
            regionId?: number
            name: string
            address?: string
            phoneNumber?: string
            status?: string
        }
        PostReplyRequest: {
            content: string
        }
        PostReplyDto: {
            /** Format: int64 */
            id?: number
            content?: string
        }
        SuccessResponsePostReplyDto: {
            message?: string
            data?: components['schemas']['PostReplyDto']
        }
        MessageRequestDto: {
            /** Format: int64 */
            receiverId: number
            content: string
        }
        MessageDto: {
            /** Format: int64 */
            id?: number
            /** Format: int64 */
            senderId?: number
            senderNickname?: string
            /** Format: int64 */
            receiverId?: number
            receiverNickname?: string
            content?: string
            /** Format: date-time */
            createdAt?: string
            read?: boolean
        }
        SuccessResponseMessageDto: {
            message?: string
            data?: components['schemas']['MessageDto']
        }
        ThemeFilterRequest: {
            regionId?: number[]
            tagIds?: number[]
            /** Format: int32 */
            participants?: number
            keyword?: string
        }
        SliceDtoThemesResponse: {
            content?: components['schemas']['ThemesResponse'][]
            hasNext?: boolean
        }
        SuccessResponseSliceDtoThemesResponse: {
            message?: string
            data?: components['schemas']['SliceDtoThemesResponse']
        }
        ThemesResponse: {
            /** Format: int64 */
            id?: number
            name?: string
            storeName?: string
            /** Format: int32 */
            runtime?: number
            recommendedParticipants?: string
            tags?: string[]
            thumbnailUrl?: string
        }
        PartyMemberReviewRequest: {
            targetNickname?: string
            reviewKeywords?: string[]
            noShow?: boolean
        }
        PartySearchCondition: {
            keyword?: string
            regionIds?: number[]
            dates?: string[]
            tagsIds?: number[]
        }
        PartySummaryResponse: {
            /** Format: int64 */
            partyId?: number
            title?: string
            /** Format: date-time */
            scheduledAt?: string
            /** Format: int32 */
            acceptedParticipantsCount?: number
            /** Format: int32 */
            totalParticipants?: number
            rookieAvailable?: boolean
            storeName?: string
            /** Format: int64 */
            themeId?: number
            themeName?: string
            themeThumbnailUrl?: string
            /** Format: int64 */
            hostId?: number
            hostNickname?: string
            hostProfilePictureUrl?: string
        }
        SliceDtoPartySummaryResponse: {
            content?: components['schemas']['PartySummaryResponse'][]
            hasNext?: boolean
        }
        SuccessResponseSliceDtoPartySummaryResponse: {
            message?: string
            data?: components['schemas']['SliceDtoPartySummaryResponse']
        }
        ThemeForMemberRequest: {
            themeName: string
            storeName: string
            thumbnailUrl?: string
            tagIds?: number[]
        }
        SimpleThemeResponse: {
            /** Format: int64 */
            themeId?: number
            themeName?: string
            storeName?: string
        }
        SuccessResponseSimpleThemeResponse: {
            message?: string
            data?: components['schemas']['SimpleThemeResponse']
        }
        DiaryFilterRequest: {
            regionId?: number[]
            tagIds?: number[]
            /** Format: date */
            startDate?: string
            /** Format: date */
            endDate?: string
            isSuccess?: string
            isNoHint?: boolean
            keyword?: string
            invalidDateRange?: boolean
        }
        DiaryListDto: {
            /** Format: int64 */
            id?: number
            /** Format: int64 */
            themeId?: number
            themeName?: string
            thumbnailUrl?: string
            tags?: string[]
            storeName?: string
            /** Format: date */
            escapeDate?: string
            /** Format: int32 */
            elapsedTime?: number
            /** Format: int32 */
            hintCount?: number
            escapeResult?: boolean
        }
        PageDtoDiaryListDto: {
            /** Format: int32 */
            currentPageNumber?: number
            /** Format: int32 */
            pageSize?: number
            /** Format: int64 */
            totalPages?: number
            /** Format: int64 */
            totalItems?: number
            items?: components['schemas']['DiaryListDto'][]
        }
        SuccessResponsePageDtoDiaryListDto: {
            message?: string
            data?: components['schemas']['PageDtoDiaryListDto']
        }
        SignupRequest: {
            nickname: string
            /** @enum {string} */
            gender: 'MALE' | 'FEMALE' | 'BLIND'
            introduction?: string
            tags?: number[]
            profilePictureUrl?: string
        }
        SliceDtoSimpleThemeResponse: {
            content?: components['schemas']['SimpleThemeResponse'][]
            hasNext?: boolean
        }
        SuccessResponseSliceDtoSimpleThemeResponse: {
            message?: string
            data?: components['schemas']['SliceDtoSimpleThemeResponse']
        }
        AdminPostSearchCondition: {
            /** @enum {string} */
            type?: 'QNA' | 'REPORT' | 'THEME'
            answered?: boolean
            deleted?: boolean
            keyword?: string
        }
        PageDtoPostSummaryResponse: {
            /** Format: int32 */
            currentPageNumber?: number
            /** Format: int32 */
            pageSize?: number
            /** Format: int64 */
            totalPages?: number
            /** Format: int64 */
            totalItems?: number
            items?: components['schemas']['PostSummaryResponse'][]
        }
        PostSummaryResponse: {
            /** Format: int64 */
            id?: number
            /** @enum {string} */
            type?: 'QNA' | 'REPORT' | 'THEME'
            title?: string
            answered?: boolean
            hasAttachments?: boolean
            /** Format: date-time */
            createdAt?: string
        }
        SuccessResponsePageDtoPostSummaryResponse: {
            message?: string
            data?: components['schemas']['PageDtoPostSummaryResponse']
        }
        AlarmCreateRequest: {
            /** Format: int64 */
            receiverId: number
            title: string
            content: string
            /** Format: int64 */
            relId?: number
            /** @enum {string} */
            alarmType:
                | 'SYSTEM'
                | 'MESSAGE'
                | 'SUBSCRIBE'
                | 'PARTY_APPLY'
                | 'PARTY_STATUS'
                | 'ANSWER_COMMENT'
                | 'POST_REPLY'
                | 'OTHER'
        }
        AlarmResponse: {
            /** Format: int64 */
            id?: number
            /** Format: int64 */
            receiverId?: number
            title?: string
            content?: string
            readStatus?: boolean
            /** @enum {string} */
            alarmType?:
                | 'SYSTEM'
                | 'MESSAGE'
                | 'SUBSCRIBE'
                | 'PARTY_APPLY'
                | 'PARTY_STATUS'
                | 'ANSWER_COMMENT'
                | 'POST_REPLY'
                | 'OTHER'
            /** Format: int64 */
            relId?: number
            /** Format: date-time */
            createdAt?: string
            /** Format: date-time */
            modifiedAt?: string
        }
        SuccessResponseAlarmResponse: {
            message?: string
            data?: components['schemas']['AlarmResponse']
        }
        UpdateProfileRequest: {
            nickname?: string
            introduction?: string
            profileImageUrl?: string
        }
        BasicProfileResponse: {
            nickname?: string
            /** @enum {string} */
            gender?: 'MALE' | 'FEMALE' | 'BLIND'
            introduction?: string
            profilePictureUrl?: string
            mannerScore?: number
        }
        SuccessResponseBasicProfileResponse: {
            message?: string
            data?: components['schemas']['BasicProfileResponse']
        }
        UpdateTagsRequest: {
            tagIds?: number[]
        }
        SuccessResponseInteger: {
            message?: string
            /** Format: int32 */
            data?: number
        }
        SliceDtoMessageDto: {
            content?: components['schemas']['MessageDto'][]
            hasNext?: boolean
        }
        SuccessResponseSliceDtoMessageDto: {
            message?: string
            data?: components['schemas']['SliceDtoMessageDto']
        }
        KeywordStatResponse: {
            /** @enum {string} */
            keyword?:
                | 'ATTENDANCE'
                | 'COMMUNICATION'
                | 'COOPERATION'
                | 'INTUITION'
                | 'LEADERSHIP'
                | 'LATE'
                | 'PASSIVE'
                | 'SELF_CENTERED'
                | 'OFF_TOPIC'
                | 'RUDE'
                | 'NO_SHOW'
            /** Format: int32 */
            count?: number
        }
        MemberReviewResponse: {
            averageScore?: number
            /** Format: int32 */
            totalReviews?: number
            /** Format: int32 */
            positiveCount?: number
            /** Format: int32 */
            negativeCount?: number
            /** Format: int32 */
            noShowCount?: number
            keywords?: components['schemas']['KeywordStatResponse'][]
        }
        SuccessResponseMemberReviewResponse: {
            message?: string
            data?: components['schemas']['MemberReviewResponse']
        }
        StoreInfo: {
            name?: string
            phoneNumber?: string
            address?: string
        }
        SuccessResponseThemeDetailResponse: {
            message?: string
            data?: components['schemas']['ThemeDetailResponse']
        }
        ThemeDetailResponse: {
            /** Format: int64 */
            id?: number
            name?: string
            description?: string
            /** Format: int32 */
            runtime?: number
            /** Format: float */
            officialDifficulty?: number
            /** Format: int32 */
            price?: number
            recommendedParticipants?: string
            thumbnailUrl?: string
            reservationUrl?: string
            tags?: string[]
            storeInfo?: components['schemas']['StoreInfo']
            diaryBasedThemeStat?: components['schemas']['ThemeStatDto']
        }
        ThemeStatDto: {
            /** Format: float */
            difficulty?: number
            /** Format: float */
            fear?: number
            /** Format: float */
            activity?: number
            /** Format: float */
            satisfaction?: number
            /** Format: float */
            production?: number
            /** Format: float */
            story?: number
            /** Format: float */
            question?: number
            /** Format: float */
            interior?: number
            /** Format: float */
            deviceRatio?: number
            /** Format: int32 */
            noHintEscapeRate?: number
            /** Format: int32 */
            escapeResult?: number
            /** Format: int32 */
            escapeTimeAvg?: number
        }
        SuccessResponseListThemesResponse: {
            message?: string
            data?: components['schemas']['ThemesResponse'][]
        }
        SuccessResponseListThemeTagResponse: {
            message?: string
            data?: components['schemas']['ThemeTagResponse'][]
        }
        ThemeTagResponse: {
            /** Format: int64 */
            id?: number
            name?: string
        }
        SuccessResponseListThemeForPartyResponse: {
            message?: string
            data?: components['schemas']['ThemeForPartyResponse'][]
        }
        ThemeForPartyResponse: {
            /** Format: int64 */
            themeId?: number
            name?: string
            storeName?: string
            tags?: string[]
        }
        SuccessResponseListSimpleThemeResponse: {
            message?: string
            data?: components['schemas']['SimpleThemeResponse'][]
        }
        SubRegionsResponse: {
            /** Format: int64 */
            id?: number
            subRegion?: string
        }
        SuccessResponseListSubRegionsResponse: {
            message?: string
            data?: components['schemas']['SubRegionsResponse'][]
        }
        PartyDetailResponse: {
            /** Format: int64 */
            id?: number
            title?: string
            /** Format: date-time */
            scheduledAt?: string
            content?: string
            /** Format: int64 */
            hostId?: number
            hostNickname?: string
            hostProfilePictureUrl?: string
            /** Format: int32 */
            acceptedParticipantsCount?: number
            /** Format: int32 */
            totalParticipants?: number
            acceptedPartyMembers?: components['schemas']['PartyMemberSummaries'][]
            AppliedPartyMembers?: components['schemas']['PartyMemberSummaries'][]
            rookieAvailable?: boolean
            /** Format: int64 */
            themeId?: number
            themeName?: string
            themeThumbnailUrl?: string
            tagNames?: string[]
            /** Format: float */
            noHintEscapeRate?: number
            /** Format: float */
            escapeResult?: number
            /** Format: float */
            escapeTimeAvg?: number
            storeName?: string
            storeAddress?: string
        }
        PartyMemberSummaries: {
            /** Format: int64 */
            id?: number
            profilePictureUrl?: string
            nickname?: string
        }
        SuccessResponsePartyDetailResponse: {
            message?: string
            data?: components['schemas']['PartyDetailResponse']
        }
        PartyMainResponse: {
            /** Format: int64 */
            themeId?: number
            themeName?: string
            themeThumbnailUrl?: string
            /** Format: int64 */
            storeId?: number
            storeName?: string
            /** Format: int64 */
            id?: number
            title?: string
            /** Format: date-time */
            scheduledAt?: string
            /** Format: int32 */
            acceptedParticipantCount?: number
            /** Format: int32 */
            totalParticipants?: number
        }
        SuccessResponseListPartyMainResponse: {
            message?: string
            data?: components['schemas']['PartyMainResponse'][]
        }
        PageDtoPartySummaryResponse: {
            /** Format: int32 */
            currentPageNumber?: number
            /** Format: int32 */
            pageSize?: number
            /** Format: int64 */
            totalPages?: number
            /** Format: int64 */
            totalItems?: number
            items?: components['schemas']['PartySummaryResponse'][]
        }
        SuccessResponsePageDtoPartySummaryResponse: {
            message?: string
            data?: components['schemas']['PageDtoPartySummaryResponse']
        }
        MyJoinedPartySummaryResponse: {
            /** Format: int64 */
            partyId?: number
            title?: string
            /** Format: date-time */
            scheduledAt?: string
            /** Format: int32 */
            acceptedParticipantsCount?: number
            /** Format: int32 */
            totalParticipants?: number
            rookieAvailable?: boolean
            storeName?: string
            /** Format: int64 */
            themeId?: number
            themeName?: string
            themeThumbnailUrl?: string
            /** Format: int64 */
            hostId?: number
            hostNickname?: string
            hostProfilePictureUrl?: string
            /** @enum {string} */
            role?: 'HOST' | 'PARTICIPANT'
            reviewed?: boolean
            /** @enum {string} */
            status?: 'RECRUITING' | 'FULL' | 'PENDING' | 'COMPLETED' | 'CANCELLED'
        }
        PageDtoMyJoinedPartySummaryResponse: {
            /** Format: int32 */
            currentPageNumber?: number
            /** Format: int32 */
            pageSize?: number
            /** Format: int64 */
            totalPages?: number
            /** Format: int64 */
            totalItems?: number
            items?: components['schemas']['MyJoinedPartySummaryResponse'][]
        }
        SuccessResponsePageDtoMyJoinedPartySummaryResponse: {
            message?: string
            data?: components['schemas']['PageDtoMyJoinedPartySummaryResponse']
        }
        EscapeProfileSummaryDto: {
            /** Format: int32 */
            totalCount?: number
            /** Format: double */
            successRate?: number
            /** Format: double */
            noHintSuccessRate?: number
        }
        MemberTagResponse: {
            /** Format: int64 */
            id?: number
            name?: string
        }
        OtherMemberProfileResponse: {
            profile?: components['schemas']['OtherProfileResponse']
            tags?: components['schemas']['MemberTagResponse'][]
            stats?: components['schemas']['EscapeProfileSummaryDto']
        }
        OtherProfileResponse: {
            nickname?: string
            /** @enum {string} */
            gender?: 'MALE' | 'FEMALE' | 'BLIND'
            introduction?: string
            profilePicture?: string
            mannerScore?: number
            /** Format: int32 */
            hostCount?: number
        }
        SuccessResponseOtherMemberProfileResponse: {
            message?: string
            data?: components['schemas']['OtherMemberProfileResponse']
        }
        SuccessResponseListMemberTagResponse: {
            message?: string
            data?: components['schemas']['MemberTagResponse'][]
        }
        LastMonthInfo: {
            /** Format: int32 */
            lastMonthCount?: number
            /** Format: double */
            lastMonthAvgSatisfaction?: number
            /** Format: double */
            lastMonthAvgHintCount?: number
            /** Format: double */
            lastMonthSuccessRate?: number
            /** Format: int32 */
            lastMonthAvgTime?: number
            lastMonthTopTheme?: string
            /** Format: int32 */
            lastMonthTopSatisfaction?: number
        }
        MemberStatResponse: {
            /** Format: int32 */
            totalCount?: number
            /** Format: double */
            successRate?: number
            /** Format: int32 */
            noHintSuccessCount?: number
            /** Format: double */
            noHintSuccessRate?: number
            /** Format: double */
            averageHintCount?: number
            genreCountMap?: {
                [key: string]: number
            }
            genreSuccessMap?: {
                [key: string]: number
            }
            tendencyMap?: {
                [key: string]: number
            }
            monthlyCountMap?: {
                [key: string]: number
            }
            /** Format: date */
            firstEscapeDate?: string
            mostActiveMonth?: string
            /** Format: int32 */
            mostActiveMonthCount?: number
            /** Format: int32 */
            daysSinceFirstEscape?: number
            lastMonthInfo?: components['schemas']['LastMonthInfo']
            difficultyHintAvgMap?: {
                [key: string]: number
            }
            difficultySatisAvgMap?: {
                [key: string]: number
            }
        }
        SuccessResponseMemberStatResponse: {
            message?: string
            data?: components['schemas']['MemberStatResponse']
        }
        SuccessResponseEscapeProfileSummaryDto: {
            message?: string
            data?: components['schemas']['EscapeProfileSummaryDto']
        }
        SuccessResponseBoolean: {
            message?: string
            data?: boolean
        }
        SuccessResponseListDiaryListDto: {
            message?: string
            data?: components['schemas']['DiaryListDto'][]
        }
        AttachmentResponse: {
            /** Format: int64 */
            id?: number
            fileName?: string
            url?: string
        }
        PostDetailResponse: {
            /** Format: int64 */
            id?: number
            /** @enum {string} */
            type?: 'QNA' | 'REPORT' | 'THEME'
            title?: string
            content?: string
            attachments?: components['schemas']['AttachmentResponse'][]
            replies?: components['schemas']['PostReplyDto'][]
            /** Format: date-time */
            createdAt?: string
        }
        SuccessResponsePostDetailResponse: {
            message?: string
            data?: components['schemas']['PostDetailResponse']
        }
        SuccessResponseThemeForAdminResponse: {
            message?: string
            data?: components['schemas']['ThemeForAdminResponse']
        }
        ThemeForAdminResponse: {
            /** Format: int64 */
            Id?: number
            name?: string
            description?: string
            /** Format: int32 */
            runtime?: number
            /** Format: float */
            officialDifficulty?: number
            /** Format: int32 */
            price?: number
            recommendedParticipants?: string
            thumbnailUrl?: string
            reservationUrl?: string
            tags?: string[]
            storeInfo?: components['schemas']['StoreInfo']
        }
        StoreResponse: {
            /** Format: int64 */
            id?: number
            name?: string
            address?: string
            /** @enum {string} */
            status?: 'OPENED' | 'CLOSED' | 'INACTIVE' | 'DELETED'
        }
        SuccessResponseListStoreResponse: {
            message?: string
            data?: components['schemas']['StoreResponse'][]
        }
        AdminPostDetailResponse: {
            /** Format: int64 */
            id?: number
            /** @enum {string} */
            type?: 'QNA' | 'REPORT' | 'THEME'
            title?: string
            content?: string
            attachments?: components['schemas']['AttachmentResponse'][]
            replies?: components['schemas']['PostReplyDto'][]
            /** Format: date-time */
            createdAt?: string
        }
        SuccessResponseAdminPostDetailResponse: {
            message?: string
            data?: components['schemas']['AdminPostDetailResponse']
        }
        Pageable: {
            /** Format: int32 */
            page?: number
            /** Format: int32 */
            size?: number
            sort?: string[]
        }
        PageDtoAlarmResponse: {
            /** Format: int32 */
            currentPageNumber?: number
            /** Format: int32 */
            pageSize?: number
            /** Format: int64 */
            totalPages?: number
            /** Format: int64 */
            totalItems?: number
            items?: components['schemas']['AlarmResponse'][]
        }
        SuccessResponsePageDtoAlarmResponse: {
            message?: string
            data?: components['schemas']['PageDtoAlarmResponse']
        }
        SuccessResponseString: {
            message?: string
            data?: string
        }
        SseEmitter: {
            /** Format: int64 */
            timeout?: number
        }
        AlarmCountResponse: {
            /** Format: int64 */
            totalCount?: number
            /** Format: int64 */
            unreadCount?: number
        }
        SuccessResponseAlarmCountResponse: {
            message?: string
            data?: components['schemas']['AlarmCountResponse']
        }
    }
    responses: never
    parameters: never
    requestBodies: never
    headers: never
    pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
    getParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePartyDetailResponse']
                }
            }
        }
    }
    modifyParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PartyRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePartyDto']
                }
            }
        }
    }
    softDeleteParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getItem: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseDiaryDto']
                }
            }
        }
    }
    modify: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['DiaryRequestDto']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseDiaryDto']
                }
            }
        }
    }
    delete: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    getPost: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePostDetailResponse']
                }
            }
        }
    }
    modifyPost: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PostRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePostDto']
                }
            }
        }
    }
    deletePost: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getTheme: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseThemeForAdminResponse']
                }
            }
        }
    }
    modify_1: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThemeForAdminRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    delete_1: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    modifyStore: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['StoreRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    deleteStore: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    modifyReply: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
                replyId: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PostReplyRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePostReplyDto']
                }
            }
        }
    }
    deleteReply: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
                replyId: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    sendMessage: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['MessageRequestDto']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseMessageDto']
                }
            }
        }
    }
    uploadImage: {
        parameters: {
            query?: {
                target?: 'PROFILE' | 'DIARY' | 'POST' | 'NONE'
            }
            header?: never
            path: {
                diaryId: number
            }
            cookie?: never
        }
        requestBody?: {
            content: {
                'multipart/form-data': {
                    /** Format: binary */
                    file?: string
                }
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    uploadAttachment: {
        parameters: {
            query?: {
                files?: string[]
            }
            header?: never
            path: {
                postId: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    getThemesWithFilter: {
        parameters: {
            query?: {
                page?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThemeFilterRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoThemesResponse']
                }
            }
        }
    }
    addWishTheme: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    deleteWishTheme: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    createParty: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PartyRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePartyDto']
                }
            }
        }
    }
    reviewPartyMembers: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PartyMemberReviewRequest'][]
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    rejectPartyMember: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
                memberId: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    applyParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    acceptPartyMember: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
                memberId: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getParties: {
        parameters: {
            query?: {
                lastId?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PartySearchCondition']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoPartySummaryResponse']
                }
            }
        }
    }
    getDiariesByMonth: {
        parameters: {
            query?: {
                year?: number
                month?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListDiaryListDto']
                }
            }
        }
    }
    write: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['DiaryRequestDto']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseDiaryDto']
                }
            }
        }
    }
    saveThemeForDiary: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThemeForMemberRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSimpleThemeResponse']
                }
            }
        }
    }
    getAllItems: {
        parameters: {
            query?: {
                page?: number
                pageSize?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['DiaryFilterRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoDiaryListDto']
                }
            }
        }
    }
    getMyPosts: {
        parameters: {
            query?: {
                type?: 'QNA' | 'REPORT' | 'THEME'
                keyword?: string
                page?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoPostSummaryResponse']
                }
            }
        }
    }
    createPost: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PostRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePostDto']
                }
            }
        }
    }
    signup: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie: {
                signupToken: string
            }
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['SignupRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    logout: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    save: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThemeForAdminRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    getThemes: {
        parameters: {
            query?: {
                page?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['ThemeFilterRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoSimpleThemeResponse']
                }
            }
        }
    }
    getStoresByKeyword: {
        parameters: {
            query?: {
                keyword?: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListStoreResponse']
                }
            }
        }
    }
    saveStore: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['StoreRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    createReply: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['PostReplyRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePostReplyDto']
                }
            }
        }
    }
    getPosts: {
        parameters: {
            query?: {
                page?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: {
            content: {
                'application/json': components['schemas']['AdminPostSearchCondition']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoPostSummaryResponse']
                }
            }
        }
    }
    getAlarms: {
        parameters: {
            query: {
                pageable: components['schemas']['Pageable']
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoAlarmResponse']
                }
            }
        }
    }
    createAlarm: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['AlarmCreateRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseAlarmResponse']
                }
            }
        }
    }
    updateReadStatus: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseMessageDto']
                }
            }
        }
    }
    unexecuteParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    executeParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getMyBasicProfile: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseBasicProfileResponse']
                }
            }
        }
    }
    updateMyProfile: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateProfileRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseBasicProfileResponse']
                }
            }
        }
    }
    getMyTags: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListMemberTagResponse']
                }
            }
        }
    }
    updateMyTags: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateTagsRequest']
            }
        }
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    markAsRead: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseAlarmResponse']
                }
            }
        }
    }
    markAllAsRead: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseInteger']
                }
            }
        }
    }
    getMessage: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseMessageDto']
                }
            }
        }
    }
    deleteMessage: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseVoid']
                }
            }
        }
    }
    getSentMessages: {
        parameters: {
            query?: {
                cursor?: string
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoMessageDto']
                }
            }
        }
    }
    getReceivedMessages: {
        parameters: {
            query?: {
                cursor?: string
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoMessageDto']
                }
            }
        }
    }
    getMemberReview: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseMemberReviewResponse']
                }
            }
        }
    }
    getTheme_1: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseThemeDetailResponse']
                }
            }
        }
    }
    getPartiesByTheme: {
        parameters: {
            query?: {
                lastId?: number
                size?: number
            }
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseSliceDtoPartySummaryResponse']
                }
            }
        }
    }
    getWishThemes: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListThemesResponse']
                }
            }
        }
    }
    getAllThemeTags: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListThemeTagResponse']
                }
            }
        }
    }
    getThemesForPartySearch: {
        parameters: {
            query: {
                keyword: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListThemeForPartyResponse']
                }
            }
        }
    }
    getThemesForDiarySearch: {
        parameters: {
            query: {
                keyword: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListSimpleThemeResponse']
                }
            }
        }
    }
    getPopularThemes: {
        parameters: {
            query: {
                tagName: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListThemesResponse']
                }
            }
        }
    }
    getNewestThemes: {
        parameters: {
            query: {
                tagName: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListThemesResponse']
                }
            }
        }
    }
    getSubRegionsByMajorRegion: {
        parameters: {
            query: {
                majorRegion: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListSubRegionsResponse']
                }
            }
        }
    }
    getReviewKeywords: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': {
                        [key: string]: string[]
                    }
                }
            }
        }
    }
    getMainParties: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListPartyMainResponse']
                }
            }
        }
    }
    getOtherJoinedParties: {
        parameters: {
            query?: {
                page?: number
                size?: number
            }
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoPartySummaryResponse']
                }
            }
        }
    }
    getMyJoinedParties: {
        parameters: {
            query?: {
                role?: 'HOST' | 'PARTICIPANT'
                todoFilter?: 'NONE' | 'HOST_PENDING' | 'PARTICIPANT_REVIEW'
                page?: number
                size?: number
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponsePageDtoMyJoinedPartySummaryResponse']
                }
            }
        }
    }
    getOtherProfile: {
        parameters: {
            query?: never
            header?: never
            path: {
                memberId: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseOtherMemberProfileResponse']
                }
            }
        }
    }
    getAllTags: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseListMemberTagResponse']
                }
            }
        }
    }
    getMemberStat: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseMemberStatResponse']
                }
            }
        }
    }
    getMyEscapeSummary: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseEscapeProfileSummaryDto']
                }
            }
        }
    }
    checkNicknameDuplicate: {
        parameters: {
            query: {
                nickname: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseBoolean']
                }
            }
        }
    }
    kakaoLogin: {
        parameters: {
            query: {
                redirectUrl: string
            }
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getPostForAdmin: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseAdminPostDetailResponse']
                }
            }
        }
    }
    deletePost_1: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    getAlarm: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseAlarmResponse']
                }
            }
        }
    }
    deleteAlarm: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
    redirectAlarm: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseString']
                }
            }
        }
    }
    subscribeAlarm: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'text/event-stream': components['schemas']['SseEmitter']
                }
            }
        }
    }
    getAlarmCounts: {
        parameters: {
            query?: never
            header?: never
            path?: never
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content: {
                    'application/json': components['schemas']['SuccessResponseAlarmCountResponse']
                }
            }
        }
    }
    cancelAppliedParty: {
        parameters: {
            query?: never
            header?: never
            path: {
                id: number
            }
            cookie?: never
        }
        requestBody?: never
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown
                }
                content?: never
            }
        }
    }
}
